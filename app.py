from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import numpy as np
import joblib  # type: ignore
from sklearn.preprocessing import LabelEncoder  # type: ignore
import os
import logging


# Configuration du logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# D√©finition de l'API
app = FastAPI(
    title="API de Pr√©diction de Churn",
    description="Cette API pr√©dit si un client va r√©silier son abonnement.",
    version="1.3.1",
)


# Attachement du dossier `static` pour servir les fichiers HTML
app.mount("/static", StaticFiles(directory="static"), name="static")


# Chemin des mod√®les
MODEL_PATH = "model.pkl"
ENCODER_PATH = "encoder.pkl"


# Chargement du mod√®le de machine learning
if os.path.exists(MODEL_PATH):
    model = joblib.load(MODEL_PATH)
    logger.info("‚úÖ Mod√®le charg√© avec succ√®s.")
else:
    logger.error("‚ùå Erreur : Mod√®le non trouv√© !")
    model = None


# Chargement de l'encodeur
if os.path.exists(ENCODER_PATH):
    encoder = joblib.load(ENCODER_PATH)
    logger.info("‚úÖ Encodeur charg√© avec succ√®s.")
else:
    logger.warning("‚ö†Ô∏è Encodeur non trouv√©. Utilisation d'un LabelEncoder par d√©faut.")
    encoder = LabelEncoder()


# Liste des features attendues
FEATURE_NAMES = [
    "State",
    "Account length",
    "Area code",
    "International plan",
    "Voice mail plan",
    "Number vmail messages",
    "Total day minutes",
    "Total day calls",
    "Total day charge",
    "Total eve minutes",
    "Total eve calls",
    "Total eve charge",
    "Total night minutes",
    "Total night calls",
    "Total night charge",
    "Total intl minutes",
    "Total intl calls",
    "Total intl charge",
    "Customer service calls",
]


# Classe pour les requ√™tes de pr√©diction
class PredictionRequest(BaseModel):
    features: dict


# Classe pour les requ√™tes de r√©entra√Ænement
class RetrainRequest(BaseModel):
    data: list[list[float]]
    labels: list[int]


# Route pour afficher l'interface HTML
@app.get("/", response_class=HTMLResponse, summary="Interface utilisateur")
async def serve_frontend():
    file_path = os.path.join("static", "index.html")
    if not os.path.exists(file_path):
        logger.error("‚ùå Fichier HTML introuvable !")
        raise HTTPException(status_code=404, detail="Fichier HTML non trouv√©")

    with open(file_path, "r", encoding="utf-8") as f:
        return HTMLResponse(content=f.read())


# Route pour effectuer une pr√©diction
@app.post("/predict", summary="Effectue une pr√©diction de churn")
async def predict(request: PredictionRequest):
    logger.info("üîç D√©but de la pr√©diction...")

    if model is None:
        logger.error("‚ùå Mod√®le non charg√© !")
        raise HTTPException(status_code=500, detail="Mod√®le non charg√©.")

    if not isinstance(request.features, dict):
        logger.error("‚ùå Les features doivent √™tre un dictionnaire.")
        raise HTTPException(
            status_code=400, detail="Les features doivent √™tre un dictionnaire."
        )

    missing_features = [f for f in FEATURE_NAMES if f not in request.features]
    if missing_features:
        logger.error(f"‚ùå Features manquantes : {missing_features}")
        raise HTTPException(
            status_code=400, detail=f"Features manquantes : {missing_features}"
        )

    logger.info(f"‚úÖ Caract√©ristiques re√ßues : {request.features}")

    transformed_features = []
    for feature in FEATURE_NAMES:
        value = request.features[feature]
        logger.info(f"üõ†Ô∏è Traitement de {feature} : {value}")
        if isinstance(value, str):
            try:
                encoded_value = encoder.transform([value])[0]
                transformed_features.append(encoded_value)
            except ValueError:
                logger.error(
                    f"‚ùå Valeur inconnue dans les features : {feature} ({value})"
                )
                raise HTTPException(
                    status_code=400, detail=f"Valeur inconnue : {feature} ({value})"
                )
        else:
            transformed_features.append(value)

    input_data = np.array(transformed_features).reshape(1, -1)

    try:
        prediction = model.predict(input_data).tolist()
        logger.info(f"‚úÖ Pr√©diction r√©ussie : {prediction}")
    except Exception as e:
        logger.error(f"‚ùå Erreur de pr√©diction : {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur de pr√©diction : {str(e)}")

    return {"prediction": prediction}


# Route pour r√©entra√Æner le mod√®le
@app.post("/retrain", summary="R√©entra√Æne le mod√®le avec de nouvelles donn√©es")
def retrain(request: RetrainRequest):
    logger.info("üîÑ D√©but du r√©entra√Ænement du mod√®le...")

    if model is None:
        logger.error("‚ùå Mod√®le non charg√© !")
        raise HTTPException(status_code=500, detail="Mod√®le non charg√©.")

    X_train = np.array(request.data)
    y_train = np.array(request.labels)

    try:
        model.fit(X_train, y_train)
        joblib.dump(model, MODEL_PATH)
        logger.info("‚úÖ Mod√®le r√©entra√Æn√© et sauvegard√© avec succ√®s.")
        return {"message": "Mod√®le r√©entra√Æn√© avec succ√®s"}
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du r√©entra√Ænement : {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))


# Tout est ajust√© avec 2 lignes vides l√† o√π c'√©tait n√©cessaire
# Tu peux relancer `make lint` pour v√©rifier ! üöÄ
